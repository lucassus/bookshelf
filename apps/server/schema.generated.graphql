schema {
  query: Query
  mutation: Mutation
}
input RegistrationInput {
  name: String!
  email: String!
  password: String!
}
union RegistrationResult = ProtectedUser | ValidationErrors
input UpdateProfileInput {
  name: String!
  email: String!
  info: String!
}
union UpdateProfileResult = ProtectedUser | ValidationErrors
type GuestUser {
  _: Boolean
}
union CurrentUserResult = GuestUser | ProtectedUser
type Query {
  """
  Returns the currently logged in user.
  """
  currentUser: CurrentUserResult!
  authors: [Author!]!
  author(id: ExternalID!): AuthorResponse!
  booksCount: Int!
  books(offset: Int = 0, limit: Int = 9): [Book!]!
  book(id: ExternalID!): BookResult!
  randomBook: Book
  resources: [Resource!]! @requireAuthorization(role: Admin)
  resource(id: ID!): Resource!
  anything(id: ID!): Anything!
    @deprecated(reason: "No longer supported. Use 'resource' instead")
  users: [User!]!
  user(id: ExternalID!): UserResult!
}
type Mutation {
  register(input: RegistrationInput!): RegistrationResult!
  updateProfile(input: UpdateProfileInput!): UpdateProfileResult!
    @requireAuthorization
  """
  Authenticates a user with the given credentials.
  """
  login(input: LoginInput!): LoginResult!
  logout: Boolean!
  updateBookFavourite(
    id: ExternalID!
    favourite: Boolean!
  ): UpdateBookFavouriteResult!
  borrowBookCopy(id: ExternalID!): BorrowBookCopyResult! @requireAuthorization
  returnBookCopy(id: ExternalID!): ReturnBookCopyResult! @requireAuthorization
  createUser(input: CreateUserInput!): CreateUserResult!
    @requireAuthorization(role: Admin)
  updateUser(input: UpdateUserInput!): UpdateUserResult!
    @requireAuthorization(role: Admin)
  deleteUser(id: ExternalID!): DeleteUserResult!
    @requireAuthorization(role: Admin)
}
enum Role {
  Admin
  User
}
input LoginInput {
  email: String!
  password: String!
}
type LoginSuccess {
  currentUser: ProtectedUser!
}
type LoginFailure {
  validationErrors: [ValidationError!]!
}
union LoginResult = LoginSuccess | LoginFailure
type Author implements Resource & Timestampable {
  id: ExternalID!
  name: String!
  bio: String!
  photo: Image!
  createdAt: ISODateString!
  updatedAt: ISODateString!
  books: [Book!]!
}
type Book implements Resource & Timestampable {
  author: Author!
  id: ExternalID!
  title: String!
  description: String!
  cover: Image!
  favourite: Boolean!
  copies: [BookCopy!]!
  createdAt: ISODateString!
  updatedAt: ISODateString!
}
union AuthorResponse = Author | ResourceNotFoundError
type BookCopy implements Timestampable {
  id: ExternalID!
  book: Book!
  borrowedAt: ISODateString
  createdAt: ISODateString!
  updatedAt: ISODateString!
  owner: User!
  borrower: User
}
interface User {
  ownedBookCopies: [BookCopy!]!
  id: ExternalID!
  name: String!
  info: String!
  avatar: AvatarResult!
  createdAt: ISODateString!
  updatedAt: ISODateString!
}
type ProtectedUser implements User & Resource & Timestampable {
  borrowedBookCopies: [BookCopy!]!
  id: ExternalID!
  name: String!
  info: String!
  avatar: AvatarResult!
  createdAt: ISODateString!
  updatedAt: ISODateString!
  email: String!
  isAdmin: Boolean!
  ownedBookCopies: [BookCopy!]!
}
union UpdateBookFavouriteResult = Book | MutationError
union BorrowBookCopyResult = BookCopy | MutationError
union ReturnBookCopyResult = BookCopy | MutationError
union BookResult = Book | ResourceNotFoundError
scalar ExternalID
scalar ISODateString
interface Timestampable {
  createdAt: ISODateString!
  updatedAt: ISODateString!
}
type Image {
  path: String!
  url: String!
}
interface Error {
  message: String!
}
type MutationError implements Error {
  message: String!
}
type ValidationError implements Error {
  path: String!
  message: String!
}
type ValidationErrors {
  errors: [ValidationError!]!
}
interface MutationResponse {
  """
  A boolean that indicates whether the mutation was successful.
  """
  success: Boolean!
  """
  Human-readable string that describes the result of the mutation
  """
  message: String!
}
interface Resource {
  id: ExternalID!
}
type ResourceNotFoundError implements Error {
  message: String!
}
union Anything = PublicUser | ProtectedUser | Author | Book | BookCopy
type PublicUser implements User & Resource & Timestampable {
  id: ExternalID!
  name: String!
  info: String!
  avatar: AvatarResult!
  createdAt: ISODateString!
  updatedAt: ISODateString!
  ownedBookCopies: [BookCopy!]!
}
type Avatar {
  image: Image!
  color: String!
}
type FlaggedAvatarError implements Error {
  message: String!
}
union AvatarResult = Avatar | FlaggedAvatarError
input AvatarInput {
  imagePath: String!
  color: String!
}
input CreateUserInput {
  name: String!
  info: String!
  email: String!
  password: String!
  avatar: AvatarInput!
}
input UpdateUserInput {
  id: ExternalID!
  name: String!
  email: String!
  info: String!
}
type CreateUserResult implements MutationResponse {
  success: Boolean!
  message: String!
  user: User
}
type UpdateUserResult implements MutationResponse {
  success: Boolean!
  message: String!
  user: User
}
type DeleteUserResult implements MutationResponse {
  success: Boolean!
  message: String!
}
union UserResult = PublicUser | ProtectedUser | ResourceNotFoundError
directive @requireAuthorization(role: Role = User) on OBJECT | FIELD_DEFINITION
