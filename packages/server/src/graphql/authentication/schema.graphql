enum Role {
  Admin
  User
}

directive @requireAuthorization(role: Role = User) on OBJECT | FIELD_DEFINITION

type CurrentUser implements Resource & Timestampable & Person {
  id: ExternalID!
  name: String!
  email: String!
  isAdmin: Boolean!
  info: String
  avatar: AvatarResult!
  createdAt: String!
  updatedAt: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginSuccess {
  currentUser: CurrentUser!
}

type LoginFailure {
  validationErrors: [ValidationError!]!
}

union LoginResult = LoginSuccess | LoginFailure

type LogoutResult implements MutationResponse {
  success: Boolean!
  message: String!
}

input RegistrationInput {
  name: String!
  email: String!
  password: String!
}

type RegistrationSuccess {
  currentUser: CurrentUser!
}

type RegistrationFailure {
  validationErrors: [ValidationError!]!
}

union RegistrationResult = RegistrationSuccess | RegistrationFailure

extend type Query {
  """
  Returns the currently logged in user.
  """
  currentUser: CurrentUser! @requireAuthorization
}

extend type Mutation {
  register(input: RegistrationInput!): RegistrationResult!

  """
  Authenticates a user with the given credentials.
  """
  login(input: LoginInput!): LoginResult!

  logout: LogoutResult!
}
