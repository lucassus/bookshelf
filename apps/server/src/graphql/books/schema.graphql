type Book implements Resource & Timestampable {
  id: ExternalID!
  title: String!
  description: String
  cover: Image!
  favourite: Boolean!
  copies: [BookCopy!]!
  createdAt: String!
  updatedAt: String!
}

extend type Author {
  books: [Book!]!
}

type BookCopy implements Resource {
  id: ExternalID!
  book: Book!
}

extend interface User {
  ownedBookCopies: [BookCopy!]!
}

extend type ProtectedUser {
  borrowedBookCopies: [BookCopy!]!
}

union UpdateBookFavouriteResult = Book | MutationError

union BorrowBookCopyResult = BookCopy | MutationError

union ReturnBookCopyResult = BookCopy | MutationError

union BookResult = Book | ResourceNotFoundError

extend type Query {
  booksCount: Int!
  books(offset: Int = 0, limit: Int = 9): [Book!]!
  book(id: ExternalID!): BookResult!
  randomBook: Book
}

extend type Mutation {
  updateBookFavourite(id: ExternalID!, favourite: Boolean!): UpdateBookFavouriteResult!

  borrowBookCopy(id: ExternalID!): BorrowBookCopyResult! @requireAuthorization
  returnBookCopy(id: ExternalID!): ReturnBookCopyResult! @requireAuthorization
}
