type Book implements Resource & Timestampable {
  id: ExternalID!
  title: String!
  description: String
  cover: Image!
  favourite: Boolean!
  author: Author!
  copies: [BookCopy!]!
  createdAt: String!
  updatedAt: String!
}

type BookCopy implements Resource {
  id: ExternalID!
  book: Book!
  owner: User!
  borrower: User
}

type UpdateBookFavouritePayload implements MutationResponse {
  success: Boolean!
  message: String!
  book: Book!
}

type BorrowBookCopyPayload implements MutationResponse {
  success: Boolean!
  message: String!
  bookCopy: BookCopy
}

type ReturnBookCopyPayload implements MutationResponse {
  success: Boolean!
  message: String!
  bookCopy: BookCopy
}

union BookResult = Book | ResourceNotFoundError

extend type Query {
  booksCount: Int!
  books(offset: Int = 0, limit: Int = 9): [Book!]!
  book(id: ExternalID!): BookResult!
  randomBook: Book
}

extend type Mutation {
  updateBookFavourite(id: ExternalID!, favourite: Boolean!): UpdateBookFavouritePayload!

  borrowBookCopy(id: ExternalID!): BorrowBookCopyPayload! @requireAuthorization
  returnBookCopy(id: ExternalID!): ReturnBookCopyPayload! @requireAuthorization
}
