type User implements Resource & Timestampable {
  id: ExternalID!
  name: String!
  info: String
  email: String! @requireAuthorization(role: Admin)
  isAdmin: Boolean! @requireAuthorization(role: Admin)
  avatar: AvatarResult!
  ownedBookCopies: [BookCopy!]!
  borrowedBookCopies: [BookCopy!]!
  createdAt: String!
  updatedAt: String!
}

type CurrentUser implements Resource & Timestampable {
  id: ExternalID!
  name: String!
  email: String!
  isAdmin: Boolean!
  info: String
  avatar: AvatarResult!
  createdAt: String!
  updatedAt: String!
}

type Avatar {
  image: Image!
  color: String!
  flagged: Boolean!
}

type FlaggedAvatarError implements Error {
  message: String!
}

union AvatarResult = Avatar | FlaggedAvatarError

input AvatarInput {
  imagePath: String!
  color: String!
}

input CreateUserInput {
  name: String!
  info: String!
  email: String!
  password: String!
  avatar: AvatarInput!
}

input UpdateUserInput {
  id: ExternalID!
  name: String!
  email: String!
  info: String!
}

type CreateUserResult implements MutationResponse {
  success: Boolean!
  message: String!
  user: User
}

type UpdateUserResult implements MutationResponse {
  success: Boolean!
  message: String!
  user: User
}

type DeleteUserResult implements MutationResponse {
  success: Boolean!
  message: String!
}

union UserResult = User | ResourceNotFoundError

extend type Query {
  users: [User!]!
  user(id: ExternalID!): UserResult!
}

extend type Mutation {
  createUser(input: CreateUserInput!): CreateUserResult! @requireAuthorization(role: Admin)
  updateUser(input: UpdateUserInput!): UpdateUserResult! @requireAuthorization(role: Admin)
  deleteUser(id: ExternalID!): DeleteUserResult! @requireAuthorization(role: Admin)
}
